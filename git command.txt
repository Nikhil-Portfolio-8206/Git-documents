Git --version
-------------------
ls 
---------------
pwd- present working directory
---------------

Configuration of Git-
git config --global user.name "Nikhil"
git config --global user.email "-----gmail.com"
git config --list -> what we have setup so far such as username and email
--------------------------

clone command-
cloning a repository on our local machine  ----   git clone <link of repository>
--------------------
cd change directory outside to inside folder , cd .. from inside folder to outside , mkdir - to make directory
------------------
ls -this command is used to display all files(excluding hidden)
------------
Get-ChildItem -Hidden (ls -a) : To display all hidden files
get-childitem -force : To display all file including hidden files
--------------------------------
status- display the state of the code

git status
----------------------------------------------------
There are mainly four types of status in git status:-

untracked - new files that git doesn't yet track
modified - changed 
staged- file is ready to be committed
unmodified- unchanged
-----------------------------------------------
Add & commit

add command -adds new or changed files in your working directory to the git staging area.
  git add <-file name-> and to add all files ---- "git add ." (To revert use- "git restore --staged .")

commit - it is the record of change
  git commit -m "some message"

-----------------------------
Push command 

push-upload local repo content to remote repo

git push origin main(or master branch or any other)
-------------------------------------------
init command:-
 
init- used to create a new git repo

git init( inital git in pwd)
Remove-Item -Recurse -Force .git   or  rm -rf .git (undo git init)

git remote add origin <-link-> (To change remote repo command->  git remote set-url origin <-link->)

git remote -v (to verify remote)

git branch (to check branch)

git branch -M main (to rename branch)

git push origin main(if your frequently using git push origin main so instead you can use command-> "git push -u origin main" , now from next time we can use only "git push")



-----------To upload a fresh folder to git repository-----

1. First create a repository(xyz name) without initializing readme.md 
2. Now got local folder where the project is being stored, use command -> "git init" -to initalized git repo
3. Now use "git remote add origin <link of new created repo>" 
4. 'git branch -M main' -to rename the master branch name to main
5. 'git add .'
6. ' git commit -m "name of project or changes made write here"  '
7. 'git push -u origin main' -project will uploaded successfully
8. Refresh the newly created repo page.


---------------------------------------------
Branch commands:-

git branch (to check branch)
git branch -M main (to change branch name)
git checkout <- branch name-> (to navigate to branches available or revert back to last code)
git checkout -b <-new branch name-> (to create new branch)
git branch -d <-branch name-> (to delete branch, if you are at the branch on which you are currently working so we can not delete that branch, to do so we have first switch the branch then delete any of the branches that is available)

-------------------------
Merging branches to the main 

Method 1-using local files
git diff <-branch name-> (to compare commits, branches, files & more and make sure you are not in the same branch for which you want to see the differences)
git merge <-branch name-> (to merge 2 branches)

Method 2-using githubd
Create a PR(pull request-tell others about the changes)(mostly prefered when working with team)
 
 if we are using pull request to merge the branches then it will not directly reflect in local files, so to do this,use pull command
 --------------------------------
 Pull command:-
 git pull origin main  ->fetch remote repo and update in local repo to match content

 ------------------------------------------------
 Resolving Merge conflicts:-
 Git is unable to automatically resolve differences in code between two commits.
 -------------------------------
 Undoing changes:-
 three case:
 1. Staged changes(we have applied in (git add ))
     git reset <-file name ->(to reset single file )
     git reset (to reset all files)

2. commited changes(for one commit or latest head)
     git reset HEAD~1

3. Commited changes (for many commits i.e want to jump to particular hash)
     git reset <-commit hash->
     git reset --hard <-commit hash->
-------------------------------
Fork - a copy of original open source or team project and use in personal account
------------------------














